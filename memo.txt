# センチネル文字のルール

（YYFILL = 0 かつ re2c:eof 無効なルール）
は基本的に `goto loop;` で先頭に戻ったあと、一番最初の switch にセンチネル文字判定がくる
センチネル文字もだった場合は 番兵ルールに goto してレキサーが終了する。


- sentinel_character.c
- sentinel_character_2.c


---------------------------------------------------------------------------


# 境界チェック付きセンチネル文字ルール


レキサーの初期状態（開始状態）に以下のチェックコードが挿入される

- YYLIMIT がバッファの末尾アドレス、YYCURSORが現在のカーソル位置
  - カーソルがバッファの末尾を超えたときに初期状態が受け付けない文字がきたかどうか
  - つまり入力がバッファ内完全に収まる場合に良いだろうか（？)

```c
default:
	// 初期状態での境界チェック
	if (YYLIMIT <= YYCURSOR) goto yyeof1;
	// 境界チェックに失敗している場合は不正な文字が来たと判断する
	goto yy2;
}
```

この設定に

```
re2c:yyfill:enable = 1;
re2c:define:YYFILL = "...";
```

を追加すると「YYFILL + EOF のルール」(yyfill_with_sentinel_character)になる


- sentinel_with_bound_check.c


---------------------------------------------------------------------------


# パディング付き境界チェック方

EOFじゃないほうの、センチネル文字をつかう。
YYFILLを有効にしている
つまり
- `re2c:eof = -1` かつ `re2c:yyfill:enable = 1` である場合


このとき生成されるコードは、レキサーのオートマトンが遷移するごとに以下のようにYYFILLコードが挿入される

```c
yy6: // [ ]+  { goto loop; }
	++YYCURSOR;
	if (YYLIMIT <= YYCURSOR) return -1; // YYFILL
	yych = *YYCURSOR;
	switch (yych) {
	case ' ':	goto yy6;
	default:	goto yy8;
	}
```

つまり、遷移するごとに現在位置がYYLIMITに達しているかチェックしている



最後、センチネル文字でのルールで、以下のように確認している
- (現在のカーソル位置+YYMAXFILL-1) が YYLIMIT と等しいか?

```c
	{ return YYCURSOR + YYMAXFILL - 1 == YYLIMIT ? count : -1; }
```



これらのルールは以下のようなセンチネル文字をパディングするユーティリティ関数の存在が前提となっている。

```c
// make a copy of the string with YYMAXFILL zeroes at the end
// 入力文字列の最後にYYMAXFILLの分だけ\0をパディングした文字列のコピーを作成する
static void test(const char *str, unsigned int len, int res)
{
    char *s = (char*) malloc(len + YYMAXFILL);
    memcpy(s, str, len);
    memset(s + len, 0, YYMAXFILL); // YYMAXFILL分\0を末尾にパディングセットしている
    int r = lex(s, len);
    free(s);
    assert(r == res);
}
```

- bound_check_with_padding.c


---------------------------------------------------------------------------


# 汎用APIによるカスタムメソッド

このソースコード例では「sentinel_with_bound_check.re.c」と同じ処理方法だが、
生成されるC言語のコードがそれぞれ自分で定義した処理に置き換わっている。
どの部分をカスタマイズしたいのかを比較すれば、どのように変更したいかが把握しやすくなるだろう。



- custom_method_with_generic_api.c



---------------------------------------------------------------------------
次からはYYFILLの動作についてのサンプルソース
---------------------------------------------------------------------------



# YYFILL + EOF のルール
バッファ再充填ありでEOFルールが有効な場合
これはつまり入力がバッファに収まらない可能性がある入力で終端文字があるという想定

このとき一番最初の状態のみ `goto yyeof1` があって最終状態まで行けるのは「センチネル文字」と同じだが
センチネル文字の判定が以下のようになっている。

```c
yyFillLabel0:
	yych = *in->cur;
	switch (yych) {
	case ' ':	goto yy4;
	case '\'':	goto yy7;
	default:
		/* 受諾できる文字以外のものが来た場合に yyfill チェック */
		if (in->lim <= in->cur) {
			/* yyfill が成功 = 新しい文字が充填されたので再度チェックするため戻る */
			if (fill(in) == 0) goto yyFillLabel0;
			/* 初期状態でのEOFルール適用 */
			goto yyeof1;
		}
		goto yy2;
	}
```

つまり YYFILL が呼ばれる条件（YYLIMIT）に引っかかっており、YYFILL が失敗したとき
受諾される文字が来ず、バッファ再充填がされなかったとき、レキサーを正常終了させるという動作になる。


- yyfill_with_sentinel_character.c


---------------------------------------------------------------------------


# YYFILL + パディング
- EOFルールじゃないほうのセンチネル文字を使うパターン
- バッファ再充填あり


サンプルソースは YYFILL に失敗したら `return -1` して即座に失敗する
この場合で生成されるソースコードは以下のようになる
- 文字を読み込む度に YYLIMIT のチェックが行われる
  - YYFILL が成功しても `goto yyFillLabel0;` のような処理が行われず、そのままマッチング処理に入る
- `yyfill_with_sentinel_character` との違いは、`default`節で失敗したときに YYLIMITチェックが入るのではなく、文字読み込みの度にYYLIMITチェックが入る点


```c
 yy6: // [ ]+   { goto loop; }
	++in->cur;
	if (in->lim <= in->cur) if (fill(in, 1) != 0) return -1; // YYFILL
	yych = *in->cur;
	switch (yych) {
	case ' ':	goto yy6;
	default:	goto yy8;
	}                      
```


- yyfill_with_padding.c


---------------------------------------------------------------------------
---------------------------------------------------------------------------


# Storable State
`-f` または `--storable-state` オプションを忘れると変なコードが出力される。

`/*!getstate:re2c*/` の箇所が以下のように置換される
- `re2c:define:YYGETSTATE` から取得できる状態変数からステートマシンの状態へ goto する

```c
    switch (in->state) {
default:
	goto yy0; // 初期状態へ
case 0:
	if (in->lim <= in->cur) goto yyeof1;
	goto yyFillLabel0;
case 1:
	if (in->lim <= in->cur) goto yy4;
	goto yyFillLabel1;
case 2:
	if (in->lim <= in->cur) goto yy10;
	goto yyFillLabel2;
}
```


```c
	default:
		if (in->lim <= in->cur) {
			in->state = 1;  // YYSETSTATE
			return WAITING; // YYFILL の置換結果がこうなる
		}
		goto yy4;
	}
```


- storable_state.c

---------------------------------------------------------------------------

# Guidance on how to use re2c for full-duplex command & response protocol

https://github.com/skvadrik/re2c/issues/241


## 最初のコメント

全二重通信でコミュニケーションするプロトコルで使いたい
クライアントはサーバーへコマンドを送信、サーバーはre2cで字句解析してパースする

クライアントはレスポンスが帰る前に複数のコマンドを送信してくる可能性あり
もしくはレスポンスを待って、時間をおいてコマンドを送ることもある。

これについて直面したトラブルは以下。
YYMAXFILLパディングはyyfill(n)が実行される時では、相対的に大きい。
多くの場合、バッファには語彙素全体に相当する未処理の入力が残っている可能性あり。

このとき、YYMAXFILLパディングするか、YYFILLをdisableしてYYPEEKで処理を再定義するかで対処している例しかないよね、それはセンチネル文字を追加するやつ。


しかし、この二つの戦略は、どちらも末尾に偽のデータを追加することが前提となっている。
でも、全二重のこのプロトコルの場合、コマンドの終わりが入力の終わりに対応することはめったにありません。
クライアントが一度、ちゃんとしたコマンド全体を送ってきたとき、サーバーからの応答を無期限にブロックすることを選択する（場合が）ある。
（つまり、コマンドを受け取ったので処理を完了するまではクライアントからの入力に対する応答を保留する必要があるということを言いたい？）


コマンドをパースするにはレキサーが最後の字句を発行しないといけないが、まだバッファが余裕あるので、re2cがさらなる入力を待ってしまい、サーバー側がデッドロックする。


ドキュメントを読むと、私はYYFILLを無効にし、YYPEEKを再定義して、入力からバッファリングされていない文字の読み取りを実行できるように、「汎用API」に切り替える必要があります。


## 追加の質問コメント

--storable-state, --input custom, re2c:yyfill:enable = 0 を組み合わせてバッファなし読み取りを行うプッシュレキサーを作成するとき、
YYSETSTATE(n）の呼び出しは、無効にされていなかった場合にYYFILL(n) が行われた場所でのみ生成される。

YYSKIPはバッファなし読み込みに使用され、データが即座に利用できない場合には return する。
(外側のプログラムがデータが準備できるまで select する)
これは、YYSETSTATE(n) が呼び出す必要がある。じゃないとレキサーは間違ったSTATEに戻ってしまう。


より多くのYYSETSTATE（n）呼び出しを生成するための追加の設定はありますか？
またはプッシュレクサーを生成するときにこの方法でYYSKIP（）を定義するべきでない？



## 作者の返信

--storable-state は YYFILL, YYMAXFILL のデフォルトモデル以外では使えない。（壊れている）
また、汎用APIはかなり後に追加されたオプションで、--storable-stateと組み合わせて使うのは初めての例。

作ろうとしているレキサー貼ってくれる？

あと、最近追加され、実験的な状態にある（まだリリースされていない）バッファーの終わりをチェックするための新しい簡略化された方法があります。この新しいモデルでは、チェックは各状態で生成されますが、入力文字に依存するため、パフォーマンスは各YYPEEK（）またはYYSKIP（）のチェックほど悪くはありません。その見返りに、プログラマーは入力の終わりの頭痛の種から解放されます。これを--storable-stateで機能させることは難しくありません（ただし、最初のスイッチにはYYFILL（）/ YYMAXFILLの場合よりも多くのブランチがあります）。私は今それを簡単にテストしました、そして私は明日必要な修正をプッシュしようとします（そしてあなたに使用例を送ります）。


## 質問の返信
プロトコルはESMTPです。
コマンドは（ほとんど）CRLFで区切られたテキストです。
前述したように、クライアントが応答をブロックする前に、1つ以上のコマンドがサーバーに到着する可能性があります。
コマンドがTCPパケットを介して分割され、サーバーが非ブロッキングIOに基づいて構築されることがあるため、プッシュモデルレクサーが必要になります。
ほとんどのクライアントは他のコンピューターですが、時折人間がtelnet経由で接続する

`BDAT nn CRLF` が最も難しいコマンド。`nn` は固定長サイズのバイナリデータで、レキサーの正規表現ルールでは表現しない部分。




省略


## 作者の返信（解決編）
re2c:eof とは「レクサーがEOF文字を検出するたびに、それが本物の文字であるか、より多くの入力が必要な状況であるかを確認する必要」があることをre2cに伝える設定。


re2cで使用される最終的なプログラムモデルは正確にはDFAではなく、いわゆるトンネルオートマトンであるため、機能しないと思います。これは、コードのサイズを縮小するために使用される最適化の1つです。トンネルオートマトンでは、すべての状態が消費されているわけではなく、一部の状態は、入力カーソルを進めずに、文字をディスパッチして他の状態に転送しているだけです（したがって「トンネル」という名前）。stateは最終的に消費するheadと派遣するbodyに分割されます（すべてではありません）。














['] ([^'\\] | [\\][^])* [']
これは引用符でかこまれた、'か\以外の任意の位置文字、または\ ^ のいずれかで構成された文字列を表す。








以下の通り sentinel_with_bound_check とはつまり YYFILL を無効にした EOF ルールのこと

EOF without YYFILL
```c
	default:
		if (YYLIMIT <= YYCURSOR) goto yyeof1;
		goto yy2;
	}
```


EOF + YYFILL
```c
	default:
		if (YYLIMIT <= YYCURSOR) {
			if (YYFILL() == 0) goto yyFillLabel0;
			goto yyeof1;
		}
		goto yy2;
	}
yy2:
```